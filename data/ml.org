#+TITLE: Machine Learning Tools
#+PROPERTY: header-args:python :session *Python*

* PyTorch
Basic PyTorch operations and neural networks.

#+BEGIN_SRC python
import torch
import torch.nn as nn

# Create tensors
x = torch.tensor([[1., 2.], [3., 4.]])
y = torch.tensor([[5., 6.], [7., 8.]])

print("Basic operations:")
print(f"Addition:\n{x + y}")
print(f"Matrix multiplication:\n{torch.mm(x, y)}")

# Simple neural network
class SimpleNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(2, 1)
        
    def forward(self, x):
        return self.linear(x)

model = SimpleNN()
print("\nNeural Network:")
print(model)
#+END_SRC

* Transformers
Working with Hugging Face Transformers.

#+BEGIN_SRC python
from transformers import pipeline

# Text generation
generator = pipeline('text-generation', model='gpt2')
prompt = "Once upon a time"
print("Generated text:")
print(generator(prompt, max_length=30, num_return_sequences=1)[0]['generated_text'])

# Sentiment analysis
classifier = pipeline('sentiment-analysis')
text = "I love working with Python!"
print("\nSentiment analysis:")
print(classifier(text))
#+END_SRC

* Optimum
Optimizing machine learning models.

#+BEGIN_SRC python
from optimum.pipelines import pipeline
from transformers import AutoTokenizer

# Load tokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Create optimized pipeline
classifier = pipeline(
    "text-classification",
    model="bert-base-uncased",
    tokenizer=tokenizer
)

# Example classification
text = "This is a test sentence."
result = classifier(text)
print("Classification result:")
print(result)
#+END_SRC